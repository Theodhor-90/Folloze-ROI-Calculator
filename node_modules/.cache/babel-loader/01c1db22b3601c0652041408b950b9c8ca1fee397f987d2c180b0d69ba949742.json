{"ast":null,"code":"import { formatToLargeNumber } from '../utils/utils';\nimport { constrainLargeNumber, getValueFromId } from './results';\nexport const calculateProductivity = questions => {\n  const first = getValueFromId(20, questions) * getValueFromId(21, questions) * 0.1;\n  const second = getValueFromId(22, questions) / 2000 * getValueFromId(23, questions) * getValueFromId(26, questions) * 2;\n  const third = getValueFromId(24, questions) / 2000 * getValueFromId(25, questions) * getValueFromId(26, questions) * 2;\n  return {\n    group: 'revenue',\n    first: {\n      regular: '300%',\n      enhanced: '400%'\n    },\n    second: {\n      regular: '2 hours',\n      enhanced: '2.5'\n    },\n    third: {\n      regular: `${formatToLargeNumber(constrainLargeNumber(first + second + third))}`,\n      enhanced: `${formatToLargeNumber(constrainLargeNumber((first + second + third) * 1.25))}`\n    }\n  };\n};","map":{"version":3,"names":["formatToLargeNumber","constrainLargeNumber","getValueFromId","calculateProductivity","questions","first","second","third","group","regular","enhanced"],"sources":["/Users/theodhor/Desktop/projects/TMPDEV/Folloze/src/calculations/productivityCalc.ts"],"sourcesContent":["import { formatToLargeNumber } from '../utils/utils';\nimport { IQuestionState, IResultState } from '../views/survey/Survey';\nimport { constrainLargeNumber, getValueFromId } from './results';\n\nexport const calculateProductivity: (\n  questions: IQuestionState[]\n) => IResultState = (questions) => {\n  const first =\n    getValueFromId(20, questions) * getValueFromId(21, questions) * 0.1;\n  const second =\n    (getValueFromId(22, questions) / 2000) *\n    getValueFromId(23, questions) *\n    getValueFromId(26, questions) *\n    2;\n  const third =\n    (getValueFromId(24, questions) / 2000) *\n    getValueFromId(25, questions) *\n    getValueFromId(26, questions) *\n    2;\n  return {\n    group: 'revenue',\n    first: {\n      regular: '300%',\n      enhanced: '400%',\n    },\n    second: {\n      regular: '2 hours',\n      enhanced: '2.5',\n    },\n    third: {\n      regular: `${formatToLargeNumber(\n        constrainLargeNumber(first + second + third)\n      )}`,\n      enhanced: `${formatToLargeNumber(\n        constrainLargeNumber((first + second + third) * 1.25)\n      )}`,\n    },\n  };\n};\n"],"mappings":"AAAA,SAASA,mBAAmB,QAAQ,gBAAgB;AAEpD,SAASC,oBAAoB,EAAEC,cAAc,QAAQ,WAAW;AAEhE,OAAO,MAAMC,qBAEI,GAAIC,SAAS,IAAK;EACjC,MAAMC,KAAK,GACTH,cAAc,CAAC,EAAE,EAAEE,SAAS,CAAC,GAAGF,cAAc,CAAC,EAAE,EAAEE,SAAS,CAAC,GAAG,GAAG;EACrE,MAAME,MAAM,GACTJ,cAAc,CAAC,EAAE,EAAEE,SAAS,CAAC,GAAG,IAAI,GACrCF,cAAc,CAAC,EAAE,EAAEE,SAAS,CAAC,GAC7BF,cAAc,CAAC,EAAE,EAAEE,SAAS,CAAC,GAC7B,CAAC;EACH,MAAMG,KAAK,GACRL,cAAc,CAAC,EAAE,EAAEE,SAAS,CAAC,GAAG,IAAI,GACrCF,cAAc,CAAC,EAAE,EAAEE,SAAS,CAAC,GAC7BF,cAAc,CAAC,EAAE,EAAEE,SAAS,CAAC,GAC7B,CAAC;EACH,OAAO;IACLI,KAAK,EAAE,SAAS;IAChBH,KAAK,EAAE;MACLI,OAAO,EAAE,MAAM;MACfC,QAAQ,EAAE;IACZ,CAAC;IACDJ,MAAM,EAAE;MACNG,OAAO,EAAE,SAAS;MAClBC,QAAQ,EAAE;IACZ,CAAC;IACDH,KAAK,EAAE;MACLE,OAAO,EAAG,GAAET,mBAAmB,CAC7BC,oBAAoB,CAACI,KAAK,GAAGC,MAAM,GAAGC,KAAK,CAAC,CAC5C,EAAC;MACHG,QAAQ,EAAG,GAAEV,mBAAmB,CAC9BC,oBAAoB,CAAC,CAACI,KAAK,GAAGC,MAAM,GAAGC,KAAK,IAAI,IAAI,CAAC,CACrD;IACJ;EACF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
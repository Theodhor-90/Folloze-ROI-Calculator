{"ast":null,"code":"import { formatToLargeNumber } from '../utils/utils';\n// Constrain unrealistic inputs\nconst constrainLargeNumber = entry => {\n  return entry > 100000000000 ? 100000000000 : entry;\n};\nexport const calculateResults = (selectedGroups, questionsList) => {\n  // Mantaining inside scope as it requires an internal prop\n  const getValueFromId = id => {\n    const selectedQuestion = questionsList.find(el => el.id === id);\n    return selectedQuestion.type === 'currency' || selectedQuestion.type === 'plain' ? parseInt(selectedQuestion.value.toString().split(',').join('')) : selectedQuestion.value;\n  };\n  const finalResults = [];\n  const groupResults = {\n    costs: [],\n    revenue: [],\n    productivity: []\n  };\n  selectedGroups.forEach(group => {\n    if (group.checked) {\n      questionsList.forEach(question => {\n        if (question.group === group.group) {\n          groupResults[group.group].push(question);\n        }\n      });\n    }\n  });\n  if (groupResults.costs.length) {\n    const first = getValueFromId(0) * getValueFromId(2);\n    const second = (getValueFromId(1) - 0.5) * getValueFromId(2);\n    finalResults.push({\n      group: 'costs',\n      first: `$${formatToLargeNumber(constrainLargeNumber(first))}`,\n      second: `${formatToLargeNumber(constrainLargeNumber(second))} hours`\n    });\n  }\n  if (groupResults.revenue.length) {\n    const first = getValueFromId(10) * 2 * (getValueFromId(11) / 100) * (getValueFromId(12) / 100) * getValueFromId(14);\n    const second = first * (getValueFromId(13) / 100);\n    finalResults.push({\n      group: 'revenue',\n      first: `$${formatToLargeNumber(constrainLargeNumber(first))}`,\n      second: `$${formatToLargeNumber(constrainLargeNumber(second))}`\n    });\n  }\n  if (groupResults.productivity.length) {\n    const first = getValueFromId(20) * getValueFromId(21) * 0.1;\n    const second = getValueFromId(22) / 2000 * getValueFromId(23) * getValueFromId(26) * 2;\n    const third = getValueFromId(24) / 2000 * getValueFromId(25) * getValueFromId(26) * 2;\n    finalResults.push({\n      group: 'productivity',\n      first: `${formatToLargeNumber(constrainLargeNumber(first + second + third))}`\n    });\n  }\n  return finalResults;\n};","map":{"version":3,"names":["formatToLargeNumber","constrainLargeNumber","entry","calculateResults","selectedGroups","questionsList","getValueFromId","id","selectedQuestion","find","el","type","parseInt","value","toString","split","join","finalResults","groupResults","costs","revenue","productivity","forEach","group","checked","question","push","length","first","second","third"],"sources":["/Users/theodhor/Desktop/projects/TMPDEV/Folloze/src/calculations/results.ts"],"sourcesContent":["import { TQuestionGroup } from '../static/questions'\nimport { formatToLargeNumber } from '../utils/utils'\nimport { IResultState, IQuestionState } from '../views/survey/Survey'\n\n// Constrain unrealistic inputs\nconst constrainLargeNumber: (entry: number) => number = (entry) => {\n    return entry > 100000000000 ? 100000000000 : entry\n\n}\n\n\n\nexport const calculateResults: (\n    selectedGroups: TQuestionGroup[],\n    questionsList: IQuestionState[]\n) => IResultState[] = (selectedGroups, questionsList) => {\n    \n    // Mantaining inside scope as it requires an internal prop\n    const getValueFromId: (id: number) => number = (id) => {\n        const selectedQuestion = questionsList.find(\n            (el) => el.id === id\n        ) as IQuestionState\n        return selectedQuestion.type === 'currency' || selectedQuestion.type === 'plain'\n            ? parseInt(selectedQuestion.value.toString().split(',').join(''))\n            : (selectedQuestion.value as number)\n    }\n\n    const finalResults = [] as IResultState[]\n    const groupResults = {\n        costs: [] as IQuestionState[],\n        revenue: [] as IQuestionState[],\n        productivity: [] as IQuestionState[],\n    }\n    selectedGroups.forEach((group) => {\n        if (group.checked) {\n            questionsList.forEach((question) => {\n                if (question.group === group.group) {\n                    groupResults[group.group].push(question)\n                }\n            })\n        }\n    })\n    if (groupResults.costs.length) {\n        const first = getValueFromId(0) * getValueFromId(2)\n        const second = (getValueFromId(1) - 0.5) * getValueFromId(2)\n        finalResults.push({\n            group: 'costs',\n            first: `$${formatToLargeNumber(constrainLargeNumber(first))}`,\n            second: `${formatToLargeNumber(constrainLargeNumber(second))} hours`\n        })\n    }\n    if (groupResults.revenue.length) {\n        const first =\n            getValueFromId(10) *\n            2 *\n            (getValueFromId(11) / 100) *\n            (getValueFromId(12) / 100) *\n            getValueFromId(14)\n        const second = first * (getValueFromId(13) / 100)\n        finalResults.push({\n            group: 'revenue',\n            first:  `$${formatToLargeNumber(constrainLargeNumber(first))}`,\n            second:  `$${formatToLargeNumber(constrainLargeNumber(second))}`\n        })\n    }\n    if (groupResults.productivity.length) {\n        const first =\n            getValueFromId(20) *\n            getValueFromId(21) *\n            0.1\n        const second =\n            (getValueFromId(22) / 2000) *\n            getValueFromId(23) *\n            getValueFromId(26) *\n            2\n        const third =\n            (getValueFromId(24) / 2000) *\n            getValueFromId(25) *\n            getValueFromId(26) *\n            2\n        finalResults.push({\n            group: 'productivity',\n            first: `${formatToLargeNumber(constrainLargeNumber(first + second + third))}`,\n        })\n    }\n\n    return finalResults\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
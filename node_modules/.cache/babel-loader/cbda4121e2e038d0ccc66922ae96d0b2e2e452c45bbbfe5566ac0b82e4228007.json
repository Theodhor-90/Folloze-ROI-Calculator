{"ast":null,"code":"var _jsxFileName = \"/Users/theodhor/Desktop/projects/TMPDEV/Folloze/src/views/survey/Survey.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { Button } from '../../components/button/Button';\nimport { icons } from '../../icons/IconIndex';\nimport { ProgressBar } from '../../components/progressBar/ProgressBar';\nimport { initialQuestion, questions, surveyOptions } from '../../static/questions';\nimport { Question } from '../../features/question/Question';\nimport { Result } from '../../features/result/Result';\nimport { formatDecimal, formatToLargeNumber } from '../../utils/utils';\nimport { calculateResults } from '../../calculations/results';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Survey = () => {\n  _s();\n  const [stage, setStage] = useState(0);\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const [canGoNext, setCanGoNext] = useState(false);\n  const [resultList, setResultList] = useState([]);\n  const [progress, setProgress] = useState(0);\n  const [selectedGroups, setSelectedGroups] = useState(surveyOptions);\n  const [questionsList, setQuestionsList] = useState([]);\n  const updateInputValue = e => {\n    const newState = structuredClone(questionsList);\n    switch (newState[questionIndex].type) {\n      case 'plain':\n        const stringifiedValue = e.target.value.split(',').join('');\n        newState[questionIndex].value = e.target.value === '' || isNaN(parseInt(e.target.value)) ? '0' : formatToLargeNumber(parseInt(stringifiedValue));\n        break;\n      case 'percentage':\n        isNaN(parseInt(e.target.value)) || parseFloat(e.target.value) <= 0 ? newState[questionIndex].value = 0 : parseFloat(e.target.value) > 100 ? newState[questionIndex].value = 100 : newState[questionIndex].value = formatDecimal(parseFloat(e.target.value));\n        break;\n      case 'currency':\n        const stringifiedCurrency = e.target.value.split(',').join('');\n        newState[questionIndex].value = e.target.value === '' || isNaN(parseInt(e.target.value)) ? '0' : formatToLargeNumber(parseInt(stringifiedCurrency));\n    }\n    setQuestionsList(newState);\n  };\n  const updateValueByStep = direction => {\n    const newState = structuredClone(questionsList);\n    const targetValue = newState[questionIndex].value;\n    const parsedValue = parseInt(targetValue.split(',').join(''));\n    const step = newState[questionIndex].increment;\n    const newValue = direction === 'up' ? parsedValue + step : parsedValue - step < 0 ? 0 : parsedValue - step;\n    newState[questionIndex].value = formatToLargeNumber(newValue);\n    setQuestionsList(newState);\n  };\n  const goNext = () => {\n    if (stage === 0) {\n      startSurvey();\n    } else if (stage === 1) {\n      if (questionIndex < questionsList.length - 1) {\n        setQuestionIndex(questionIndex + 1);\n      } else {\n        buildResults();\n        setStage(2);\n      }\n    } else if (stage === 2) {\n      resetSurvey();\n    }\n  };\n  const goPrev = () => {\n    if (stage === 1) {\n      if (questionIndex === 0) {\n        setStage(0);\n      } else {\n        setQuestionIndex(questionIndex - 1);\n      }\n    } else if (questionIndex === questionsList.length - 1 && stage === 2) {\n      setStage(1);\n    }\n  };\n  const updateSelection = index => {\n    const newState = structuredClone(selectedGroups);\n    newState[index].checked = !newState[index].checked;\n    setSelectedGroups(newState);\n  };\n  const buildSurvey = () => {\n    const generatedQuestions = [];\n    selectedGroups.forEach(el => {\n      if (el.checked) {\n        questions[el.group].forEach(singleQuestion => {\n          generatedQuestions.push({\n            ...singleQuestion,\n            group: el.group\n          });\n        });\n      }\n    });\n    setQuestionsList(generatedQuestions);\n  };\n  const buildResults = () => {\n    const finalResults = calculateResults(selectedGroups, questionsList);\n    setResultList(finalResults);\n  };\n  const startSurvey = () => {\n    buildSurvey();\n    setStage(1);\n  };\n  const resetSurvey = () => {\n    setSelectedGroups(surveyOptions);\n    setQuestionIndex(0);\n    setStage(0);\n  };\n  useEffect(() => {\n    let isThereASelection = false;\n    if (selectedGroups.find(el => el.checked)) {\n      isThereASelection = true;\n    }\n    setCanGoNext(isThereASelection);\n  }, [selectedGroups]);\n  useEffect(() => {\n    if (stage === 0) {\n      setProgress(0);\n    } else if (stage === 2) {\n      setProgress(100);\n    } else {\n      const actualProgress = (questionIndex + 1) / (questionsList.length + 1) * 100;\n      if (actualProgress < 0) {\n        setProgress(0);\n      } else if (actualProgress > 100) {\n        setProgress(100);\n      } else setProgress(actualProgress);\n    }\n  }, [stage, questionIndex]);\n  const ArrowRight = () => /*#__PURE__*/_jsxDEV(icons.arrow.right, {\n    stroke: \"white\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 30\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `survey folloze-container ${stage === 2 ? 'showing-results' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [stage !== 2 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mobile-only\",\n        children: /*#__PURE__*/_jsxDEV(ProgressBar, {\n          completed: progress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 21\n      }, this), stage === 2 ? /*#__PURE__*/_jsxDEV(Result, {\n        results: resultList,\n        resetSurvey: resetSurvey\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${stage === 1 ? 'initial-question' : ''}`,\n        children: [stage === 0 && /*#__PURE__*/_jsxDEV(Question, {\n          question: initialQuestion,\n          onClick: updateSelection,\n          onChange: updateInputValue,\n          options: selectedGroups\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 33\n        }, this), stage === 1 && /*#__PURE__*/_jsxDEV(Question, {\n          question: questionsList[questionIndex],\n          onClick: updateSelection,\n          onChange: updateInputValue,\n          questionIndex: questionIndex,\n          value: questionsList[questionIndex].value,\n          toggleStep: updateValueByStep\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 13\n    }, this), stage !== 2 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls fw\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex justify-between buttons-wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          text: \"Previous\",\n          callBack: goPrev,\n          variant: \"secondary\",\n          disabled: stage === 0,\n          className: stage === 0 ? 'invisible' : ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          text: stage === 1 && questionIndex === questionsList.length - 1 ? 'See my results' : 'Next question',\n          callBack: () => goNext(),\n          variant: \"primary\",\n          icon: ArrowRight,\n          disabled: !canGoNext\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"hide-mobile\",\n        children: /*#__PURE__*/_jsxDEV(ProgressBar, {\n          completed: progress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 9\n  }, this);\n};\n_s(Survey, \"EihWUlHcOqTEbBtqj9BwLqzVwVw=\");\n_c = Survey;\nvar _c;\n$RefreshReg$(_c, \"Survey\");","map":{"version":3,"names":["useEffect","useState","Button","icons","ProgressBar","initialQuestion","questions","surveyOptions","Question","Result","formatDecimal","formatToLargeNumber","calculateResults","jsxDEV","_jsxDEV","Survey","_s","stage","setStage","questionIndex","setQuestionIndex","canGoNext","setCanGoNext","resultList","setResultList","progress","setProgress","selectedGroups","setSelectedGroups","questionsList","setQuestionsList","updateInputValue","e","newState","structuredClone","type","stringifiedValue","target","value","split","join","isNaN","parseInt","parseFloat","stringifiedCurrency","updateValueByStep","direction","targetValue","parsedValue","step","increment","newValue","goNext","startSurvey","length","buildResults","resetSurvey","goPrev","updateSelection","index","checked","buildSurvey","generatedQuestions","forEach","el","group","singleQuestion","push","finalResults","isThereASelection","find","actualProgress","ArrowRight","arrow","right","stroke","fileName","_jsxFileName","lineNumber","columnNumber","className","children","completed","results","question","onClick","onChange","options","toggleStep","text","callBack","variant","disabled","icon","_c","$RefreshReg$"],"sources":["/Users/theodhor/Desktop/projects/TMPDEV/Folloze/src/views/survey/Survey.tsx"],"sourcesContent":["import { FC, useEffect, useState } from 'react'\nimport { Button } from '../../components/button/Button'\nimport { icons } from '../../icons/IconIndex'\nimport { ProgressBar } from '../../components/progressBar/ProgressBar'\nimport {\n    initialQuestion,\n    IQuestion,\n    questions,\n    surveyOptions,\n} from '../../static/questions'\nimport { Question } from '../../features/question/Question'\nimport { Result } from '../../features/result/Result'\nimport {\n    formatDecimal,\n    formatToLargeNumber,\n} from '../../utils/utils'\nimport { TToggleStep } from '../../components/input/Input'\nimport { calculateResults } from '../../calculations/results';\n\nexport interface IQuestionState extends IQuestion {\n    group: keyof typeof questions\n}\n\nexport type TResultSingle = {\n    regular: string\n    enhanced: string\n}\n\nexport interface IResultState {\n    group: 'costs' | 'revenue' | 'productivity'\n    first: string | TResultSingle\n    second?: string | TResultSingle\n    third?: string | TResultSingle\n}\n\nexport const Survey: FC<{}> = () => {\n    const [stage, setStage] = useState(0)\n    const [questionIndex, setQuestionIndex] = useState(0)\n    const [canGoNext, setCanGoNext] = useState(false)\n    const [resultList, setResultList] = useState([] as IResultState[])\n    const [progress, setProgress] = useState(0)\n    const [selectedGroups, setSelectedGroups] = useState(surveyOptions)\n    const [questionsList, setQuestionsList] = useState([] as IQuestionState[])\n\n    const updateInputValue = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const newState = structuredClone(questionsList) as IQuestionState[]\n\n        switch (newState[questionIndex].type) {\n            case 'plain':\n                const stringifiedValue = e.target.value.split(',').join('')\n                newState[questionIndex].value =\n                    e.target.value === '' || isNaN(parseInt(e.target.value))\n                        ? '0'\n                        : formatToLargeNumber(parseInt(stringifiedValue))\n                break\n            case 'percentage':\n                isNaN(parseInt(e.target.value)) ||\n                parseFloat(e.target.value) <= 0\n                    ? (newState[questionIndex].value = 0)\n                    : parseFloat(e.target.value) > 100\n                    ? (newState[questionIndex].value = 100)\n                    : (newState[questionIndex].value = formatDecimal(\n                          parseFloat(e.target.value)\n                      ))\n                break\n            case 'currency':\n                const stringifiedCurrency = e.target.value.split(',').join('')\n                newState[questionIndex].value =\n                    e.target.value === '' || isNaN(parseInt(e.target.value))\n                        ? '0'\n                        : formatToLargeNumber(parseInt(stringifiedCurrency))\n        }\n        setQuestionsList(newState)\n    }\n\n    const updateValueByStep: TToggleStep = (direction) => {\n        const newState = structuredClone(questionsList) as IQuestionState[]\n        const targetValue = newState[questionIndex].value as string\n        const parsedValue = parseInt(targetValue.split(',').join(''))\n        const step = newState[questionIndex].increment as number\n        const newValue =\n            direction === 'up'\n                ? parsedValue + step\n                : parsedValue - step < 0\n                ? 0\n                : parsedValue - step\n        newState[questionIndex].value = formatToLargeNumber(newValue)\n        setQuestionsList(newState)\n    }\n\n    const goNext = () => {\n        if (stage === 0) {\n            startSurvey()\n        } else if (stage === 1) {\n            if (questionIndex < questionsList.length - 1) {\n                setQuestionIndex(questionIndex + 1)\n            } else {\n                buildResults()\n                setStage(2)\n            }\n        } else if (stage === 2) {\n            resetSurvey()\n        }\n    }\n\n    const goPrev = () => {\n        if (stage === 1) {\n            if (questionIndex === 0) {\n                setStage(0)\n            } else {\n                setQuestionIndex(questionIndex - 1)\n            }\n        } else if (questionIndex === questionsList.length - 1 && stage === 2) {\n            setStage(1)\n        }\n    }\n\n    const updateSelection = (index: number) => {\n        const newState = structuredClone(selectedGroups)\n        newState[index].checked = !newState[index].checked\n        setSelectedGroups(newState)\n    }\n\n    const buildSurvey = () => {\n        const generatedQuestions = [] as IQuestionState[]\n        selectedGroups.forEach((el) => {\n            if (el.checked) {\n                questions[el.group].forEach((singleQuestion) => {\n                    generatedQuestions.push({\n                        ...singleQuestion,\n                        group: el.group,\n                    })\n                })\n            }\n        })\n        setQuestionsList(generatedQuestions)\n    }\n\n    const buildResults = () => {\n        const finalResults = calculateResults(selectedGroups, questionsList)\n        setResultList(finalResults)\n    }\n\n    const startSurvey = () => {\n        buildSurvey()\n        setStage(1)\n    }\n\n    const resetSurvey: () => void = () => {\n        setSelectedGroups(surveyOptions)\n        setQuestionIndex(0)\n        setStage(0)\n    }\n\n    useEffect(() => {\n        let isThereASelection = false\n        if (selectedGroups.find((el) => el.checked)) {\n            isThereASelection = true\n        }\n        setCanGoNext(isThereASelection)\n    }, [selectedGroups])\n\n    useEffect(() => {\n        if (stage === 0) {\n            setProgress(0)\n        } else if (stage === 2) {\n            setProgress(100)\n        } else {\n            const actualProgress =\n                ((questionIndex + 1) / (questionsList.length + 1)) * 100\n            if (actualProgress < 0) {\n                setProgress(0)\n            } else if (actualProgress > 100) {\n                setProgress(100)\n            } else setProgress(actualProgress)\n        }\n    }, [stage, questionIndex])\n\n    const ArrowRight = () => <icons.arrow.right stroke='white' />\n    return (\n        <div\n            className={`survey folloze-container ${\n                stage === 2 ? 'showing-results' : ''\n            }`}\n        >\n            <div>\n                {stage !== 2 && (\n                    <div className='mobile-only'>\n                        <ProgressBar completed={progress} />\n                    </div>\n                )}\n                {stage === 2 ? (\n                    <Result results={resultList} resetSurvey={resetSurvey} />\n                ) : (\n                    <div className={`${stage === 1 ? 'initial-question' : ''}`}>\n\n                            {stage === 0 && (\n                                <Question\n                                    question={initialQuestion}\n                                    onClick={updateSelection}\n                                    onChange={updateInputValue}\n                                    options={selectedGroups}\n                                />\n                            )}\n                            {stage === 1 && (\n                                <Question\n                                    question={questionsList[questionIndex]}\n                                    onClick={updateSelection}\n                                    onChange={updateInputValue}\n                                    questionIndex={questionIndex}\n                                    value={questionsList[questionIndex].value}\n                                    toggleStep={updateValueByStep}\n                                />\n                            )}\n\n                    </div>\n                )}\n            </div>\n\n            {stage !== 2 && (\n                <div className='controls fw'>\n                    <div className='d-flex justify-between buttons-wrapper'>\n                        <Button\n                            text='Previous'\n                            callBack={goPrev}\n                            variant='secondary'\n                            disabled={stage === 0}\n                            className={stage === 0 ? 'invisible' : ''}\n                        />\n                        <Button\n                            text={\n                                stage === 1 &&\n                                questionIndex === questionsList.length - 1\n                                    ? 'See my results'\n                                    : 'Next question'\n                            }\n                            callBack={() => goNext()}\n                            variant='primary'\n                            icon={ArrowRight}\n                            disabled={!canGoNext}\n                        />\n                    </div>\n                    <div className='hide-mobile'>\n                        <ProgressBar completed={progress} />\n                    </div>\n                </div>\n            )}\n        </div>\n    )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
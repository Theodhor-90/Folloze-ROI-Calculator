{"ast":null,"code":"import { formatToLargeNumber } from '../utils/utils';\n// Constrain unrealistic inputs\nexport const constrainLargeNumber = entry => {\n  return entry > 100000000000 ? 100000000000 : entry;\n};\nexport const getValueFromId = (id, questionsList) => {\n  const selectedQuestion = questionsList.find(el => el.id === id);\n  return selectedQuestion.type === 'currency' || selectedQuestion.type === 'plain' ? parseInt(selectedQuestion.value.toString().split(',').join('')) : selectedQuestion.value;\n};\nexport const calculateResults = (selectedGroups, questionsList) => {\n  // Mantaining inside scope as it requires an internal prop\n\n  const getValueFromId = id => {\n    const selectedQuestion = questionsList.find(el => el.id === id);\n    return selectedQuestion.type === 'currency' || selectedQuestion.type === 'plain' ? parseInt(selectedQuestion.value.toString().split(',').join('')) : selectedQuestion.value;\n  };\n  const finalResults = [];\n  const groupResults = {\n    costs: [],\n    revenue: [],\n    productivity: []\n  };\n  selectedGroups.forEach(group => {\n    if (group.checked) {\n      questionsList.forEach(question => {\n        if (question.group === group.group) {\n          groupResults[group.group].push(question);\n        }\n      });\n    }\n  });\n  if (groupResults.costs.length) {\n    const first = getValueFromId(0) * getValueFromId(2);\n    const second = (getValueFromId(1) - 0.5) * getValueFromId(2);\n    finalResults.push({\n      group: 'costs',\n      first: `$${formatToLargeNumber(constrainLargeNumber(first))}`,\n      second: `${formatToLargeNumber(constrainLargeNumber(second))} hours`\n    });\n  }\n  if (groupResults.revenue.length) {\n    const first = getValueFromId(10) * 2 * (getValueFromId(11) / 100) * (getValueFromId(12) / 100) * getValueFromId(14);\n    const second = first * (getValueFromId(13) / 100);\n    finalResults.push({\n      group: 'revenue',\n      first: `$${formatToLargeNumber(constrainLargeNumber(first))}`,\n      second: `$${formatToLargeNumber(constrainLargeNumber(second))}`\n    });\n  }\n  if (groupResults.productivity.length) {\n    const first = getValueFromId(20) * getValueFromId(21) * 0.1;\n    const second = getValueFromId(22) / 2000 * getValueFromId(23) * getValueFromId(26) * 2;\n    const third = getValueFromId(24) / 2000 * getValueFromId(25) * getValueFromId(26) * 2;\n    finalResults.push({\n      group: 'productivity',\n      first: `${formatToLargeNumber(constrainLargeNumber(first + second + third))}`\n    });\n  }\n  return finalResults;\n};","map":{"version":3,"names":["formatToLargeNumber","constrainLargeNumber","entry","getValueFromId","id","questionsList","selectedQuestion","find","el","type","parseInt","value","toString","split","join","calculateResults","selectedGroups","finalResults","groupResults","costs","revenue","productivity","forEach","group","checked","question","push","length","first","second","third"],"sources":["/Users/theodhor/Desktop/projects/TMPDEV/Folloze/src/calculations/results.ts"],"sourcesContent":["import { TQuestionGroup } from '../static/questions';\nimport { formatToLargeNumber } from '../utils/utils';\nimport { IResultState, IQuestionState } from '../views/survey/Survey';\n\n// Constrain unrealistic inputs\nexport const constrainLargeNumber: (entry: number) => number = (entry) => {\n  return entry > 100000000000 ? 100000000000 : entry;\n};\n\nexport const getValueFromId: (\n  id: number,\n  questionsList: IQuestionState[]\n) => number = (id, questionsList) => {\n  const selectedQuestion = questionsList.find(\n    (el) => el.id === id\n  ) as IQuestionState;\n  return selectedQuestion.type === 'currency' ||\n    selectedQuestion.type === 'plain'\n    ? parseInt(selectedQuestion.value.toString().split(',').join(''))\n    : (selectedQuestion.value as number);\n};\n\nexport const calculateResults: (\n  selectedGroups: TQuestionGroup[],\n  questionsList: IQuestionState[]\n) => IResultState[] = (selectedGroups, questionsList) => {\n  // Mantaining inside scope as it requires an internal prop\n\n  const getValueFromId: (id: number) => number = (id) => {\n    const selectedQuestion = questionsList.find(\n      (el) => el.id === id\n    ) as IQuestionState;\n    return selectedQuestion.type === 'currency' ||\n      selectedQuestion.type === 'plain'\n      ? parseInt(selectedQuestion.value.toString().split(',').join(''))\n      : (selectedQuestion.value as number);\n  };\n\n  const finalResults = [] as IResultState[];\n  const groupResults = {\n    costs: [] as IQuestionState[],\n    revenue: [] as IQuestionState[],\n    productivity: [] as IQuestionState[],\n  };\n  selectedGroups.forEach((group) => {\n    if (group.checked) {\n      questionsList.forEach((question) => {\n        if (question.group === group.group) {\n          groupResults[group.group].push(question);\n        }\n      });\n    }\n  });\n  if (groupResults.costs.length) {\n    const first = getValueFromId(0) * getValueFromId(2);\n    const second = (getValueFromId(1) - 0.5) * getValueFromId(2);\n    finalResults.push({\n      group: 'costs',\n      first: `$${formatToLargeNumber(constrainLargeNumber(first))}`,\n      second: `${formatToLargeNumber(constrainLargeNumber(second))} hours`,\n    });\n  }\n  if (groupResults.revenue.length) {\n    const first =\n      getValueFromId(10) *\n      2 *\n      (getValueFromId(11) / 100) *\n      (getValueFromId(12) / 100) *\n      getValueFromId(14);\n    const second = first * (getValueFromId(13) / 100);\n    finalResults.push({\n      group: 'revenue',\n      first: `$${formatToLargeNumber(constrainLargeNumber(first))}`,\n      second: `$${formatToLargeNumber(constrainLargeNumber(second))}`,\n    });\n  }\n  if (groupResults.productivity.length) {\n    const first = getValueFromId(20) * getValueFromId(21) * 0.1;\n    const second =\n      (getValueFromId(22) / 2000) * getValueFromId(23) * getValueFromId(26) * 2;\n    const third =\n      (getValueFromId(24) / 2000) * getValueFromId(25) * getValueFromId(26) * 2;\n    finalResults.push({\n      group: 'productivity',\n      first: `${formatToLargeNumber(\n        constrainLargeNumber(first + second + third)\n      )}`,\n    });\n  }\n\n  return finalResults;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}